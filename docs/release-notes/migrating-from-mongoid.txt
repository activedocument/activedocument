
Deprecation

In general, anything marked deprecated in Mongoid has been removed in

We recommend you to have upgrade to Mongoid 9.0 before attempting to migrate to ActiveDocument.


Philosophy:
- Build your own queries using nested hashes.
- SQL like / ActiveRecord like chaining is not supported.

Symbol Operators

:foo.in => ['bar', 'baz']

Query Functionality

| Method | Migration |
| ------ | --------- |
| `#all` | No longer supports method arguments. Use `#contains_all` if you mean to match an Array's elements. |
| `#all_in` | Removed. Use `#contains_all`. |
| `#in` | Renamed `#any_in` (also aliased to `#contains_any`) |
| `#nin` | Renamed `#not_in` (also aliased to `#contains_none`) |

Operator methods

| Method | Migration |
| ------ | --------- |
| `#with_size` | Renamed to `#size_of`. |
| `#with_type` | Renamed to `#type_of`. |

Chainable Logical Operators

These are dangerous and have. ActiveDocument will not attempt to be SQL-like, and will not attempt to replicate anything
in active record.
https://serpapi.com/blog/how-a-routine-gem-update-ended-up-charging/

To avoid accidental confusion with both Mongoid and ActiveRecord's behavior, we are removing the `and`, `or`, and `nor` operators.

| `#and` | Removed. Chaining operations are removed because they cause confusion. Use non-chaining `#all_of` instead. |
| `#or` | Removed. Chaining operations are removed because they cause confusion. Use non-chaining `#any_of` instead. |
| `#nor` | Removed. Chaining operations are removed because they cause confusion. Use non-chaining `#none_of` instead. |
| `#not` | Still works . |

Merge strategies

Merge strategies have been removed. Instead, build a query hash using the `$and`, `$or`, and `$nor` operators.

| `#override` | Removed. |
| `#union` | Removed. Use `$or` to build a query hash instead. |
| `#intersect` | Removed. Use `$and` to build a query hash instead. |

Implicit range queries

BAD:
  Band.any_in(year: 1950)

GOOD:
  Band.where(year: 1950)
  Band.any_in(year: [1950])

  => #<ActiveDocument::Criteria
    selector: {"year"=>{"$in"=>[1950]}}
    options:  {}
    class:    Band
    embedded: false>



Setting Field Type as a Class is Deprecated
-------------------------------------------

ActiveDocument has historically supported defining the ``field :type`` option
as either a Symbol or a Class. As of Mongoid 8.0, using a Class is deprecated
and Symbol is preferred. Support for ``field :type`` as a Class will be
removed in a future major version of Mongoid.

.. code-block:: ruby

  class Person
    include ActiveDocument::Document

    # Deprecated; will log a warning message.
    field :first_name, type: String

    # Good
    field :last_name, type: :string
  end


Support for Defining Custom Field Type Values
---------------------------------------------

Mongoid 8.0 adds the ability to define custom ``field :type`` Symbol values as follows:

.. code-block:: ruby

  # in /config/initializers/active_document_custom_fields.rb

  Mongoid.configure do |config|
    config.field_type :point, Point
  end

Refer to the :ref:`docs <http://docs.mongodb.org/manual/reference/fields/#custom-field-types>` for details.


Support for Defining Custom Field Type Values
---------------------------------------------

Mongoid 9.0 adds the ability to define custom ``field :type`` Symbol values as follows:

.. code-block:: ruby

  # in /config/initializers/active_document.rb

  Mongoid.configure do |config|
    config.field_type :point, Point
  end

Refer to the :ref:`docs <http://docs.mongodb.org/manual/reference/fields/#custom-field-types>` for details.


Rename error InvalidFieldType to UnknownFieldType
-------------------------------------------------

The error class InvalidFieldType has been renamed to UnknownFieldType
to improve clarity. This error occurs when attempting using the
``field`` macro in a Document definition with a ``:type`` Symbol that
does not correspond to any built-in or custom-defined field type.

.. code-block:: ruby

  class User
    include ActiveDocument::Document

    field :name, type: :bogus
    #=> raises ActiveDocument::Errors::UnknownFieldType
  end


Support for Defining Custom Field Options via Top-Level Config
--------------------------------------------------------------

Mongoid 9.0 adds the ability to define custom ``field`` options as follows:

.. code-block:: ruby

  # in /config/initializers/active_document.rb

  Mongoid.configure do |config|
    config.field_option :max_length do |model, field, value|
      model.validates_length_of field.name, maximum: value
    end
  end

In Mongoid 8, this was possible with the following legacy syntax. Users are
recommended to migrate to the Mongoid 9.0 syntax above.

.. code-block:: ruby

  ActiveDocument::Fields.option :max_length do |model, field, value|
    model.validates_length_of field.name, maximum: value
  end

Refer to the :ref:`docs <http://docs.mongodb.org/manual/reference/fields/#custom-field-options>` for details.
